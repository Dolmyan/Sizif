from datetime import datetime, timedelta

from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, Bot
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.generators import *
from app.handlers import show_waiting_animation
from app.states import Form
from config import *
from database import BotDB

db = BotDB('sizif_mode.db')
router = Router()
bot = Bot(token=TG_TOKEN)

from sisyphus_questions import questions

trans = {
    "drink_water": "üíß –ü–∏—Ç—å 2‚Äì3 –ª –≤–æ–¥—ã",
    "wake_earlier": "‚è∞ –ü—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è —Ä–∞–Ω—å—à–µ",
    "exercise": "üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç 3‚Äì4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
    "read_books": "üìñ –ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥",
    "goal_journal": "üìì –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ü–µ–ª–µ–π",
    "time_management": "‚è≥ –¢–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç",
    "balanced_diet": "ü•ó –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
    "no_procrastination": "üöÄ –û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏",
    "social_media_detox": "üìµ –î–µ—Ç–æ–∫—Å –æ—Ç —Å–æ—Ü—Å–µ—Ç–µ–π",
    "meditation": "üßò‚Äç‚ôÇÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è/–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å",
    "sleep_schedule": "üåô –†–µ–∂–∏–º —Å–Ω–∞",
    "morning_exercise": "ü§∏‚Äç‚ôÇÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–∑–º–∏–Ω–∫–∞",
    "weekly_review": "üìä –†–∞–∑–±–æ—Ä —É—Å–ø–µ—Ö–æ–≤ –∏ –Ω–µ—É–¥–∞—á",
    "work_breaks": "üîÑ –†–∞–±–æ—Ç–∞-–ø–µ—Ä–µ—Ä—ã–≤—ã",
    "track_expenses": "üí∞ –ó–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–æ–≤",
    "clean_workspace": "üßπ –£–±–æ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞",
    "declutter": "üóëÔ∏è –ß–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
    "fresh_air": "üåø 30 –º–∏–Ω—É—Ç –Ω–∞ –≤–æ–∑–¥—É—Ö–µ",
    "no_gadgets": "üì¥ –ë–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "less_caffeine_sugar": "‚òï –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ—Ñ–µ –∏ —Å–∞—Ö–∞—Ä–∞"
}

go_to_personality_type = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üß© –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É', callback_data='personality_type')],
])


@router.callback_query(lambda c: c.data in ['sisyphus'])
async def sisyphus(callback_query: CallbackQuery, state: FSMContext):
    db.status_active(callback_query.from_user.id)
    if not db.get_info_up(callback_query.from_user.id).get('personality_type'):
        await callback_query.message.answer(
            "üîπ –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å! \n\n"
            "‚ú® –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ –≤–∞—Å –∏ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
            "üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá",
            reply_markup=go_to_personality_type
        )
    else:
        await callback_query.message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üìå',
            reply_markup=kb.sisyphus_menu
        )


@router.callback_query(lambda c: c.data in ['today_task'])
async def today_task(callback_query: CallbackQuery, state: FSMContext):
    if db.get_sisyphus_date(callback_query.from_user.id):
        start = db.get_sisyphus_date(callback_query.from_user.id)
        today = datetime.now().strftime("%d-%m-%Y")

        # today='20-11-2024'

        start_date = datetime.strptime(start, '%d-%m-%Y')
        today_date = datetime.strptime(today, '%d-%m-%Y') + timedelta(days=1)

        day = (today_date - start_date).days
        a = await callback_query.message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", parse_mode='HTML')

        response = await generator(user_id=callback_query.from_user.id, content=f'–ø—Ä–∏—à–ª–∏ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å {day}')

        id[0] = a.message_id
        await callback_query.message.edit_text(text=f'{response}', parse_mode='HTML', reply_markup=kb.menu_button)
        await bot.delete_message(chat_id=callback_query.chat.id, message_id=id[0])
    else:
        await callback_query.message.answer(
            text='–ß—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç —Å–µ–π—á–∞—Å',
            reply_markup=kb.sisyphus
        )


@router.callback_query(lambda c: c.data in ['new_task'])
async def new_task(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        text='–ß–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–π—á–∞—Å?',
        reply_markup=kb.sisyphus
    )


@router.callback_query(lambda c: c.data in [
    "drink_water", "wake_earlier", "exercise", "read_books", "goal_journal",
    "time_management", "balanced_diet", "no_procrastination", "social_media_detox",
    "meditation", "sleep_schedule", "morning_exercise", "weekly_review", "work_breaks",
    "track_expenses", "clean_workspace", "declutter", "fresh_air", "no_gadgets",
    "less_caffeine_sugar"
])
async def callback_generate_question(callback_query: CallbackQuery, state: FSMContext):
    theme = callback_query.data
    await state.update_data(sisyphus_theme=theme, current_question=0)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 0-–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await send_next_question(callback_query.message, state)


async def send_next_question(message, state: FSMContext):
    data = await state.get_data()
    theme = data.get('sisyphus_theme')
    question_number = data.get('current_question', 0)
    if question_number < len(questions[theme]):
        question_text = questions[theme][question_number]
        await message.answer(text=question_text, parse_mode='HTML')
        await state.update_data(
            {f'question{question_number + 1}': question_text, 'current_question': question_number + 1}
        )
    else:
        all_answers = []
        for i in range(1, len(questions[theme]) + 1):
            answer = data.get(f'answer{i}', '–ù–µ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç')
            question = data.get(f'question{i}', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å')
            all_answers.append(f'–í–æ–ø—Ä–æ—Å {i}: {question}\n–û—Ç–≤–µ—Ç: {answer}')

        all_answers_text = "\n\n".join(all_answers)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_details = db.get_all_about(message.from_user.id)
        try:
            a = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", parse_mode='HTML')

            request_task = asyncio.create_task(
                generator(
                    user_id=message.from_user.id,
                    content='–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ: '
                            f'{user_details}'
                            f'–º–æ—è –ø—Ä–∏–≤—ã—á–∫–∞: {trans[theme]}'
                            f'{all_answers_text}'
                            f'–≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á—Ç–æ —Ç—ã '
                            f'–±—É–¥–µ—à—å –¥–∞–≤–∞—Ç—å –º–Ω–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º '
                            f'–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. —Å–µ–π—á–∞—Å —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–ª–∞—Ç—å'
                            f'–º–Ω–µ —Ç–µ–æ—Ä–∏—é-–º–æ—Ç–∏–≤–∞—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –ø–æ—á–µ–º—É —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ '
                            f'–º–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –≤–∞–∂–Ω–∞'
                )
            )

            await show_waiting_animation(a, request_task)

            response = await request_task

            id[0] = a.message_id
            button = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='get_task_sis'),
                ],
                [
                    InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu'),
                ]
            ])
            await message.answer(text=f'{response}', parse_mode='HTML', reply_markup=button)
            await bot.delete_message(chat_id=message.chat.id, message_id=id[0])
            db.sisyphus_active(message.from_user.id)
            await state.clear()
        except AttributeError:
            await message.answer('–ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n'
                                 '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è')
            await state.set_state(Form.birthday)
    await state.set_state(Form.nexttt)


@router.message(Form.nexttt)
async def handle_question_response(message: Message, state: FSMContext):
    data = await state.get_data()
    question_number = data.get('current_question', 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    await state.update_data({f'answer{question_number}': message.text})

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await send_next_question(message, state)


@router.callback_query(lambda c: c.data in ['get_task_sis'])
async def new_task(callback_query: CallbackQuery, state: FSMContext):
    a = await callback_query.message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", parse_mode='HTML')

    request_task = asyncio.create_task(
        generator(
            user_id=callback_query.from_user.id,
            content='—É—á–∏—Ç—ã–≤–∞—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, '
                    '–∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –±–æ—Ä–æ—Ç—å—Å—è —Å –º–æ–µ–π –ø—Ä–∏–≤—ã—á–∫–æ–π '

        )
    )

    await show_waiting_animation(a, request_task)

    response = await request_task

    id[0] = a.message_id

    await callback_query.message.answer(text=f'{response}', parse_mode='HTML', reply_markup=kb.menu_button)
    db.update_tasks(callback_query.from_user.id, response)
    db.update_taskdate(callback_query.from_user.id)
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=id[0])




