from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram import Router, Bot, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

import app.keyboards as kb
from app.generators import *
from app.states import Form
from config import *
from database import BotDB

db = BotDB('sizif_mode.db')
router = Router()
bot = Bot(token=TG_TOKEN)


class TestState(StatesGroup):
    question = State()


QUESTIONS = [
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —É –≤–∞—Å –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏—è?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å –∏–ª–∏ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Å—Ç—Ä–∞–¥–∞–µ—Ç–µ –æ—Ç –±–µ—Å—Å–æ–Ω–Ω–∏—Ü—ã –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–Ω–∞?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –±–æ–ª—å –≤ —Ç–µ–ª–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã —Å—Ç—Ä–µ—Å—Å–∞?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —É –≤–∞—Å –±—ã–≤–∞—é—Ç –ø—Ä–æ—Å—Ç—É–¥—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–ª–∞–±–æ—Å—Ç—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–Ω–µ—Ä–≥–∏–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–ª–æ—Ö–æ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è?",
    "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–æ–µ–≥–æ —Å–Ω–∞?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å –∏–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –≥–ª–∞–∑–∞—Ö?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–≤–æ–≥—É –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å?",
    "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ —Ç–µ—Ä—è–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∂–∏–∑–Ω–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –¥–µ–ø—Ä–µ—Å—Å–∏—é –∏–ª–∏ —É–Ω—ã–Ω–∏–µ?",
    "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø—É—Å—Ç–æ—Ç—É –∏–ª–∏ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ –æ –±—É–¥—É—â–µ–º?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –æ–∫—Ä—É–∂–∞—é—â–∏—Ö?",
    "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏ –ª—é–¥—å–º–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Å—Ç—Ä–µ—Å—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –≤ —É—á–µ–±–µ?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏–ª–∏ –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏ –ª—é–¥—å–º–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞–º —É–¥–∞—ë—Ç—Å—è –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –æ–±—â–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –≤ –¥–µ–Ω—å?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤—Ä–µ–¥–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –∏–ª–∏ —Å–µ—Ä–∏–∞–ª—ã?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞–º–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —á—É–≤—Å—Ç–≤–æ –≥–æ–ª–æ–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–µ–¥–∞–µ—Ç–µ?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ?"
]

ANSWERS = [
    ("–ü–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞", -3),
    ("–û—á–µ–Ω—å —Ä–µ–¥–∫–æ", -2),
    ("–ò–Ω–æ–≥–¥–∞", -1),
    ("–†–µ–¥–∫–æ", 0),
    ("–ß–∞—Å—Ç–æ", +1),
    ("–û—á–µ–Ω—å —á–∞—Å—Ç–æ", +2),
    ("–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞", +3)
]

is_ast_working = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üîÆ –î–∞, –¥–æ–ø—É—Å–∫–∞—é', callback_data='astrology_yes')],
    [InlineKeyboardButton(text='üôÖ‚Äç‚ôÇÔ∏è –ù–µ—Ç, –Ω–µ –≤–µ—Ä—é', callback_data='astrology_no')],
])

def generate_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="-3", callback_data="e-3"),
                InlineKeyboardButton(text="-1", callback_data="e-1"),
                InlineKeyboardButton(text="+1", callback_data="e1"),
                InlineKeyboardButton(text="+3", callback_data="e3"),
            ],
            [
                InlineKeyboardButton(text="-2", callback_data="e-2"),
                InlineKeyboardButton(text="0", callback_data="e0"),
                InlineKeyboardButton(text="+2", callback_data="e2"),
            ]
        ]
    )


@router.callback_query(lambda c: c.data in ['energy_test'])
async def menu(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(score=0, current_question=0)
    await send_question(callback_query.from_user.id, state)


async def send_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    current_question = data["current_question"]

    if current_question < len(QUESTIONS):
        question_text = f"<b>–í–æ–ø—Ä–æ—Å {current_question + 1}/{len(QUESTIONS)}</b>\n‚è≥ <i>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: 10 —Å–µ–∫—É–Ω–¥</i>\n\n{QUESTIONS[current_question]}"
        msg = await bot.send_message(chat_id, question_text, reply_markup=generate_keyboard(), parse_mode='HTML')

        await state.update_data(last_msg_id=msg.message_id)
        await asyncio.sleep(10)

        data = await state.get_data()
        if data.get("current_question"):
            if data["current_question"] == current_question:
                await handle_timeout(chat_id, state)
    else:
        await finish_test(chat_id, state)


async def handle_timeout(chat_id: int, state: FSMContext):
    data = await state.get_data()
    current_question = data["current_question"]
    score = data["score"]

    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=data["last_msg_id"],
        text=f"‚è≥ <b>–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!</b>\n–í–∞—à –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ <i>–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (0 –±–∞–ª–ª–æ–≤)</i>.",
        parse_mode='HTML',
    )

    await state.update_data(score=score + 0, current_question=current_question + 1)
    await send_question(chat_id, state)


@router.callback_query(F.data.in_([f"e{x[1]}" for x in ANSWERS]))
async def handle_answer(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_question = data["current_question"]
    score = data["score"]

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"<b>–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!</b> ‚úÖ",
        parse_mode='HTML',
    )

    await state.update_data(score=score + int(callback_query.data[1:]), current_question=current_question + 1)
    await send_question(callback_query.message.chat.id, state)



async def finish_test(chat_id: int, state: FSMContext):
    data = await state.get_data()
    final_score = data["score"]
    avg_score = round(final_score / len(QUESTIONS), 2)

    level = ""
    if avg_score <= -2:
        level = "üî¥ <b>–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏</b>\n–í—ã —á–∞—Å—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ—Å—Å."
    elif avg_score <= -1:
        level = "üü† <b>–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏</b>\n–í–∞–º –º–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å —Å–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
    elif avg_score <= 0:
        level = "üü° <b>–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏</b>\n–í—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –Ω–æ –∏–Ω–æ–≥–¥–∞ —É—Å—Ç–∞—ë—Ç–µ."
    elif avg_score <= 1:
        level = "üü¢ <b>–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏</b>\n–í—ã –∞–∫—Ç–∏–≤–Ω—ã –∏ –ø–æ–ª–Ω—ã —Å–∏–ª!"
    else:
        level = "üíö <b>–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏</b>\n–í—ã –∑–∞—Ä—è–∂–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –ª—é–±—ã–º –≤—ã–∑–æ–≤–∞–º!"
    gotolife = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ö —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É', callback_data='life_test')],
    ])
    await bot.send_message(chat_id, f"<b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n<b>–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {avg_score}\n\n{level}",
                           parse_mode='HTML',
                           reply_markup=gotolife)
    db.update_energy(user_id=chat_id, energy=final_score)
    await state.clear()




