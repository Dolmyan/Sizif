import logging
import asyncio
import os
import re
import time
from datetime import datetime, timedelta

from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.fsm import state
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from app.generators import *
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.generators import *
from app.states import Form, Sisyphus, Todo
from config import *
from database import BotDB

db = BotDB('sizif_mode.db')
router = Router()
bot = Bot(token=TG_TOKEN)


async def show_tasks(entity):
    tasks = db.get_tasks(entity.from_user.id)
    print(tasks)
    task_buttons = [
        [InlineKeyboardButton(text=task[0], callback_data=f'about_{i}_{task[0]}')]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
        for i, task in enumerate(tasks)
    ]
    task_buttons.append([
        InlineKeyboardButton(text='üìã –ú–µ–Ω—é', callback_data='menu'),
        InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='todo_new_task')
    ])
    task_buttons.append([
        InlineKeyboardButton(text='üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', callback_data='clearall')
    ])

    task_menu = InlineKeyboardMarkup(inline_keyboard=task_buttons)

    if not tasks:
        await bot.send_message(
            chat_id=entity.from_user.id,
            text='<b>üö´ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.</b>',
            reply_markup=task_menu,
            parse_mode='HTML'
        )
        return

    tasks_text = "<b>üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n" \
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–π –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. üñãÔ∏è"

    if isinstance(entity, Message):
        await entity.answer(
            text=tasks_text,
            reply_markup=task_menu,
            parse_mode='HTML'
        )
    elif isinstance(entity, CallbackQuery):
        await entity.message.answer(
            text=tasks_text,
            reply_markup=task_menu,
            parse_mode='HTML'
        )


@router.callback_query(lambda c: c.data == 'todo')
async def view_tasks(callback_query: CallbackQuery):
    task_function_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ ToDo (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á)', callback_data='todo_todo')],
        [InlineKeyboardButton(text='üß© –î–µ–∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä (—Ä–∞–∑–±–∏—Ç—å –ø–ª–∞–Ω)', callback_data='todo_decomposer')],
        [InlineKeyboardButton(text='‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏)', callback_data='todo_scheduler')],
        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='menu')],

    ])
    await callback_query.message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏:</b>\n\n"
        "‚úÖ <b>ToDo</b> ‚Äì –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª: "
        "–¥–æ–±–∞–≤–ª—è–π—Ç–µ, –æ—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏.\n\n"
        "üß© <b>–î–µ–∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä</b> ‚Äì –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–±–∏—Ç—å —Å–ª–æ–∂–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —à–∞–≥–∏. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –∏ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏.\n\n"
        "‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫</b> ‚Äì —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏. "
        "–£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –≤–æ–≤—Ä–µ–º—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å!",
        parse_mode="HTML",
        reply_markup=task_function_menu
    )


@router.callback_query(lambda c: c.data == 'todo_todo')
async def view_tasks(callback_query: CallbackQuery):
    await show_tasks(callback_query)


@router.callback_query(lambda c: c.data == 'todo_new_task')
async def create_new_task(callback_query: CallbackQuery, state: FSMContext):
    a = await callback_query.message.edit_text(
        text='<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:</b>',
        parse_mode='HTML'
    )
    id[0] = a.message_id
    await state.set_state(Todo.awaiting_task)


@router.message(Todo.awaiting_task)
async def save_new_task(message: Message, state: FSMContext):
    task_text = message.text
    await bot.delete_message(chat_id=message.chat.id, message_id=id[0])
    tasks = db.get_tasks(message.from_user.id)
    tasks.append([task_text, None, None])

    db.update_tasks(user_id=message.from_user.id, tasks=tasks)
    await state.clear()
    await show_tasks(message)


@router.callback_query(lambda c: c.data == 'clearall')
async def clear(callback_query: CallbackQuery, state: FSMContext):
    db.update_tasks(callback_query.from_user.id, tasks=[])
    await show_tasks(callback_query)
