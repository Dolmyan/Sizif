from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram import Router, Bot, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

import app.keyboards as kb
from app.generators import *
from app.handlers import show_waiting_animation
from app.states import Form
from config import *
from database import BotDB

db = BotDB('sizif_mode.db')
router = Router()
bot = Bot(token=TG_TOKEN)


@router.message(Form.motivation)
async def cmd_start(message: Message, state: FSMContext):
    motivation = message.text
    db.update_motivation(user_id=message.from_user.id, motivation=motivation)
    await message.answer(
        text='<b>–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π –º–µ—á—Ç–µ üí´</b>\n–û —á—ë–º —Ç—ã –º–µ—á—Ç–∞–µ—à—å? –ù–∞–ø–∏—à–∏ 2‚Äì3 –∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≥—Ä–µ—é—Ç –¥—É—à—É üíñ',
        parse_mode="HTML"
    )
    await state.set_state(Form.dream)


@router.message(Form.dream)
async def cmd_start(message: Message, state: FSMContext):
    dream = message.text
    db.update_dream(user_id=message.from_user.id, dream=dream)
    await message.answer(
        text='<b>–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ç–µ—Å—Ç "5 –ü–æ—á–µ–º—É" üîç</b>\n–ù–∞–ø–∏—à–∏, <i>—á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å?</i> (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–•–æ—á—É –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥¬ª).',
        parse_mode="HTML"
    )
    await state.set_state(Form.waiting_for_want)


@router.message(Form.waiting_for_want)
async def ask_first_question(message: Message, state: FSMContext):
    user_want = message.text
    await state.update_data(first_want=user_want)
    await message.answer(
        text='<i>–ü–æ—á–µ–º—É —ç—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ç–≤–æ–µ–π —Ü–µ–ª—å—é?</i>',
        parse_mode="HTML"
    )
    await state.set_state(Form.waiting_for_why1)


@router.message(Form.waiting_for_why1)
async def ask_second_question(message: Message, state: FSMContext):
    user_answer_why1 = message.text
    data = await state.get_data()
    user_want = data.get('first_want')
    await state.update_data(answer_why1=user_answer_why1)
    await message.answer(
        text=f'–¢—ã —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Ö–æ—á–µ—à—å {user_want}. <i>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è?</i>',
        parse_mode="HTML"
    )
    await state.set_state(Form.waiting_for_why2)


@router.message(Form.waiting_for_why2)
async def ask_third_question(message: Message, state: FSMContext):
    user_answer_why2 = message.text
    data = await state.get_data()
    await state.update_data(answer_why2=user_answer_why2)
    await message.answer(
        text=f'–¢—ã —Å–∫–∞–∑–∞–ª, —á—Ç–æ {user_answer_why2} –≤–∞–∂–Ω–æ. <i>–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å?</i>?',
        parse_mode="HTML"
    )
    await state.set_state(Form.waiting_for_why3)


@router.message(Form.waiting_for_why3)
async def ask_fourth_question(message: Message, state: FSMContext):
    user_answer_why3 = message.text
    data = await state.get_data()
    await state.update_data(answer_why3=user_answer_why3)
    await message.answer(
        text=f'–¢—ã —Å–∫–∞–∑–∞–ª, —á—Ç–æ {user_answer_why3} –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å. <i>–ö–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏?</i>',
        parse_mode="HTML"
    )
    await state.set_state(Form.waiting_for_why4)


@router.message(Form.waiting_for_why4)
async def ask_fifth_question(message: Message, state: FSMContext):
    user_answer_why4 = message.text
    data = await state.get_data()
    await state.update_data(answer_why4=user_answer_why4)
    await message.answer(
        text=f'–¢—ã —Å–∫–∞–∑–∞–ª, —á—Ç–æ {user_answer_why4} –≤–∞–∂–Ω–æ –¥–ª—è —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π. <i>–ü–æ—á–µ–º—É —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è –ª–∏—á–Ω–æ?</i>',
        parse_mode="HTML"
    )
    await state.set_state(Form.waiting_for_why5)


@router.message(Form.waiting_for_why5)
async def finalize_test(message: Message, state: FSMContext):
    user_answer_why5 = message.text
    data = await state.get_data()
    await state.update_data(answer_why5=user_answer_why5)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
    answers = [
        data.get('first_want'),
        data.get('answer_why1'),
        data.get('answer_why2'),
        data.get('answer_why3'),
        data.get('answer_why4'),
        user_answer_why5
    ]
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç

    a = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—à—É –∏—Å—Ç–∏–Ω–Ω—É—é –º–µ—á—Ç—É", parse_mode='HTML')

    request_task = asyncio.create_task(
        generator(
            user_id=message.from_user.id,
            content=f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π - —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –º–æ–µ–π –∏—Å—Ç–∏–Ω–Ω–æ–π –º–µ—á—Ç–æ–π.'
                    f'–æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º'
             f'–ß–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å? {answers[0]}\n'
             f'–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ? {answers[1]}\n'
             f'–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å? {answers[2]}\n'
             f'–ö–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏? {answers[3]}\n'
             f'–ü–æ—á–µ–º—É —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è –ª–∏—á–Ω–æ? {answers[4]} {answers[5]}\n\n'

        )
    )

    await show_waiting_animation(a, request_task)

    response = await request_task

    id[0] = a.message_id
    energy_test_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üß© –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É', callback_data='energy_test')],
    ])
    await message.answer(text=f'{response}', parse_mode='HTML', reply_markup=energy_test_button)
    await bot.delete_message(chat_id=message.from_user.id, message_id=id[0])

    await state.clear()
