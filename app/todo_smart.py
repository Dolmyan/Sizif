import logging
import asyncio
import os
import re
import time
from datetime import datetime, timedelta

from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.fsm import state
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from app.generators import *
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.generators import *
from app.handlers import show_waiting_animation
from app.states import Form, Sisyphus, Todo
from config import *
from database import BotDB

db = BotDB('sizif_mode.db')
router = Router()
bot = Bot(token=TG_TOKEN)

change_time = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='–ü–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change_time'),
    ],
    [
        InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu'),
    ]
])

menu_add = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', callback_data='add_decomposer_task'),
    ],
    [
        InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu'),
    ]
])

@router.callback_query(lambda c: c.data in ['todo_decomposer', 'todo_scheduler'])
async def new_task(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == 'todo_decomposer':
        await callback_query.message.answer(
            "<b>–î–µ–∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä: —Ä–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —à–∞–≥–∏ üß©</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –∏–ª–∏ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "üìå <i>¬´–ù–∞–ø–∏—Å–∞—Ç—å –¥–∏–ø–ª–æ–º–Ω—É—é —Ä–∞–±–æ—Ç—É¬ª</i>\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤. –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
            "1Ô∏è‚É£ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–º—É –∏ —Å–æ–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            "2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –≤–≤–µ–¥–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å\n"
            "4Ô∏è‚É£ –û—Ñ–æ—Ä–º–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É:",
            parse_mode="HTML"
        )
        await state.update_data(mode="decomposer")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ state

    elif callback_query.data == 'todo_scheduler':
        await callback_query.message.answer(
            "<b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "üìù <i>¬´–ò–∑—É—á–∏—Ç—å –≥–ª–∞–≤—ã 1-3, –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã¬ª</i>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n\n"
            "1Ô∏è‚É£ –ò–∑—É—á–∏—Ç—å –≥–ª–∞–≤—ã 1-3 ‚Äì <i>14:00</i>\n"
            "2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç ‚Äì <i>16:00</i>\n"
            "3Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã ‚Äì <i>18:00</i>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.",
            parse_mode="HTML"
        )
        await state.update_data(mode="scheduler")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ state
    print(111)
    await state.set_state(Todo.task)

@router.message(Todo.task)
async def get_task(message: Message, state: FSMContext):
    print(222)
    data = await state.get_data()
    mode = data.get("mode")  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º (decomposer –∏–ª–∏ scheduler)
    task = message.text
    print(333)
    if mode == "decomposer":
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt = (
            f"–†–∞–∑–±–µ–π –∑–∞–¥–∞—á—É ¬´{task}¬ª –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —á–µ—Ç–∫–∏–µ —à–∞–≥–∏, "
            "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏."
        )

    elif mode == "scheduler":
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        prompt = (
            f"–ü–æ–º–æ–≥–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –ú–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: {task}. "
            "–£–∫–∞–∂–∏, –∫–∞–∫ –º–æ–∂–Ω–æ –ª–æ–≥–∏—á–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –±–ª–æ–∫–∞–º. "
            "–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n\n"
            "<u>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏:</u>\n\n"
            "1. <b>[–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ 1]</b> ‚Äî 08:00-10:00 - <i>–∫—Ä–∞—Ç—á–∞–π—à–∏–π —Å–æ–≤–µ—Ç (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)</i>\n"
        )
    a = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", parse_mode='HTML')

    request_task = asyncio.create_task(
        generator(
            user_id=message.from_user.id,
            content=prompt
        )
    )

    await show_waiting_animation(a, request_task)

    response = await request_task

    id[0] = a.message_id
    if mode == "scheduler":

        await message.answer(text=f'{response}', parse_mode='HTML', reply_markup=change_time)
    else:
        await message.answer(text=f'{response}', parse_mode='HTML', reply_markup=menu_add)

    await bot.delete_message(chat_id=message.chat.id, message_id=id[0])
    await state.clear()

@router.callback_query(lambda c: c.data in ['change_time'])
async def new_task(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "<b>‚è∞ –í—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á –º–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!</b>\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∑–∞–¥–∞—á, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã.\n"
        "–ü—Ä–∏–º–µ—Ä: <i>–ó–∞–¥–∞—á–∞ 1 ‚Äì 14:00</i>\n\n"
        "‚úèÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏, –∏ –º—ã –∏—Ö —É—á—Ç–µ–º!",
        parse_mode="HTML"
    )
    await state.set_state(Todo.time)

@router.message(Todo.time)
async def get_task(message: Message, state: FSMContext):
    task = message.text
    prompt = (f'–æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π: {task}')
    a = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", parse_mode='HTML')

    request_task = asyncio.create_task(generator(user_id=message.from_user.id, content=prompt))

    await show_waiting_animation(a, request_task)

    response = await request_task

    await message.answer(text=f'{response}', parse_mode='HTML', reply_markup=change_time)
    await bot.delete_message(chat_id=message.chat.id, message_id=a.message_id)

