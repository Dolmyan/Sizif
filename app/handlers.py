import logging
import asyncio
import os
import re
import time
from datetime import datetime, timedelta

from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.fsm import state
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from app.generators import *
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.generators import *
from app.states import Form
from config import *
from database import BotDB

db = BotDB('sizif_mode.db')
router = Router()
bot = Bot(token=TG_TOKEN)

logger = logging.getLogger(__name__)


async def show_menu(user_id):
    await bot.send_message(
        text='üìã <b>–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é!</b> üìã\n\n'
             '‚¨áÔ∏è –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚¨áÔ∏è',
        reply_markup=kb.menu,
        chat_id=user_id,
        parse_mode='HTML'
    )


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    print(db.get_info_up(message.from_user.id))
    user_id = message.from_user.id
    username = message.from_user.username
    command_args = message.text.split(' ')
    users = db.get_all_user_ids()

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}, Username: {username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: '{message.text}'")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–∑–µ
    if user_id not in users:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        db.add_user(user_id=user_id,
                    username=username.lower(),
                    first_name=message.from_user.first_name)
        db.add_todo(user_id=user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        if len(command_args) > 1:
            ref_code = command_args[1]
            inviter_id = int(ref_code)
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É: {ref_code}, ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: {inviter_id}")

            a = str(db.get_ids())
            if (str(inviter_id) in a) and (str(user_id) != str(inviter_id)) and str(user_id) not in a:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª {inviter_id}.")
                await message.answer(
                    f"üåÄ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ <b>–°–∏–∑–∏—Ñ—É</b> –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: <b>{inviter_id}</b>! "
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã! ‚ö°",
                    parse_mode='HTML')

    if not db.get_thread(user_id):
        logger.info(f"–°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
        thread = await client.beta.threads.create()
        thread_id = thread.id
        db.update_thread(user_id, thread_id)
        logger.info(f"–¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, ID —Ç—Ä–µ–¥–∞: {thread_id}")

    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å
    if not db.get_subscription(user_id):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å.")
        db.insert_status(user_id)

    if not db.get_motivation(user_id) or not db.get_dream(user_id):
        await message.answer(
            text='<b>–ß—Ç–æ —Ç–µ–±—è –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?</b> ü§î –ù–∞–ø–∏—à–∏ 2-3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç —Ç–µ–±—è –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üí≠‚ú®',
            parse_mode="HTML")
        await state.set_state(Form.motivation)


    else:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}")
        await message.answer(
            "<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏–∑–∏—Ñ!</b>\n\n"
            "üîπ <b>–°–∏–∑–∏—Ñ</b> ‚Äî —ç—Ç–æ –ø—É—Ç—å –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è, —Ä–æ—Å—Ç–∞ –∏ –ø–æ–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å—Ç–µ—Ä–∂–Ω—è. "
            "–ú—ã –Ω–µ –¥–∞—ë–º –ª—ë–≥–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π, –Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–∏–ª—ã –¥—É—Ö–∞. üèî\n\n"
            "üî• –ó–¥–µ—Å—å –≤—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π, –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é –∏ –∏–¥—Ç–∏ –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º, "
            "–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –í—ã –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥? –¢–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º! üí™",
            parse_mode='HTML'
        )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}")
        await bot.send_message(
            text='üìå <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n'
                 'üîª –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞. üîª',
            reply_markup=kb.menu,
            chat_id=user_id,
            parse_mode='HTML'
        )
        await state.clear()


@router.callback_query(lambda c: c.data in ['menu'])
async def menu(callback_query: CallbackQuery, state: FSMContext):
    await show_menu(callback_query.from_user.id)


@router.message(Command('reset'))
async def cmd_start(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞.")
    thread = await client.beta.threads.create()
    thread_id = thread.id
    db.update_thread(message.from_user.id, thread_id)
    logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ—Ç–æ–∫ —Å ID {thread_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")


async def show_waiting_animation(message, request_task, delay=0.5):
    logger.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}.")
    dots_animation = [
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..",
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        "‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        "‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..",
        "‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    ]

    try:
        while not request_task.done():
            for dots in dots_animation:
                if request_task.done():
                    break
                await asyncio.sleep(delay)
                await message.edit_text(dots)
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è: {dots}")
    except asyncio.CancelledError:
        logger.warning("–ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@router.message(Command('test'))
async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —Ç–µ—Å—Ç.")
    await message.answer('–≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å')
    await state.set_state(Form.test)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 'Form.test'.")


@router.message(Form.test)
async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç: {message.text}")
    text = message.text
    response = await generate_test(question=text, thread_id=db.get_thread(message.from_user.id))
    await message.answer(response)
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {response}")


@router.message(Command('today'))
async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É '—Å–µ–≥–æ–¥–Ω—è'.")
    start = db.get_sisyphus_date(message.from_user.id)
    today = datetime.now().strftime("%d-%m-%Y")

    start_date = datetime.strptime(start, '%d-%m-%Y')
    today_date = datetime.strptime(today, '%d-%m-%Y') + timedelta(days=1)

    day = (today_date - start_date).days
    a = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", parse_mode='HTML')

    response = await generator(user_id=message.from_user.id, content=f'–ø—Ä–∏—à–ª–∏ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å {day}')

    id[0] = a.message_id
    await message.answer(text=f'{response}', parse_mode='HTML', reply_markup=kb.menu_button)
    await bot.delete_message(chat_id=message.chat.id, message_id=id[0])
    logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É '—Å–µ–≥–æ–¥–Ω—è' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {response}")


@router.message(Command('raz'))
async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É 'raz'.")
    response = await generator_nothread(
        content=f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π - —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –º–æ–µ–π –∏—Å—Ç–∏–Ω–Ω–æ–π –º–µ—á—Ç–æ–π.'
                f'–æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º'
                f'–ß–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å? –•–æ—á—É –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥\n'
                f'–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ? –ß—Ç–æ–±—ã —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º\n'
                f'–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å? –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É —Å–∞–º –≤—ã–±–∏—Ä–∞—Ç—å, —á–µ–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è\n'
                f'–ö–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏? –Ø —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º\n'
                f'–ü–æ—á–µ–º—É —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è –ª–∏—á–Ω–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ —è —Ö–æ—á—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ –º–æ—è –∂–∏–∑–Ω—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–º—ã—Å–ª–æ–º ‚ú®\n\n',
        user_id=message.from_user.id)
    logger.info(f"–û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ –∫–æ–º–∞–Ω–¥–µ 'raz': {response}")


@router.message(Command('thread'))
async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É 'thread'.")
    response = await get_thread_content(db.get_thread(message.from_user.id))

    for mes in response:
        await message.answer(f"{mes['role'].capitalize()}: {mes['text']}")
        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {mes['role'].capitalize()}: {mes['text']}")


@router.message(Command('t'))
async def cmd_start(message: Message, state: FSMContext):
    button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='t', callback_data='get_task_sis'), ],
    ])
    await message.answer(text='t', reply_markup=button)
    a = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—à—É –∏—Å—Ç–∏–Ω–Ω—É—é –º–µ—á—Ç—É", parse_mode='HTML')

    request_task = asyncio.create_task(
        generator(
            user_id=message.from_user.id,
            content=f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π - —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –º–æ–µ–π –∏—Å—Ç–∏–Ω–Ω–æ–π –º–µ—á—Ç–æ–π.'
                    f'–æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º'
                    f'–ß–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å? –•–æ—á—É –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥\n'
                    f'–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ? –ß—Ç–æ–±—ã —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º\n'
                    f'–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å? –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É —Å–∞–º –≤—ã–±–∏—Ä–∞—Ç—å, —á–µ–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è\n'
                    f'–ö–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏? –Ø —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º\n'
                    f'–ü–æ—á–µ–º—É —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è –ª–∏—á–Ω–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ —è —Ö–æ—á—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ –º–æ—è –∂–∏–∑–Ω—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–º—ã—Å–ª–æ–º ‚ú®\n\n'

        )
    )

    await show_waiting_animation(a, request_task)

    response = await request_task

    id[0] = a.message_id

    await message.answer(text=f'{response}', parse_mode='HTML', reply_markup=kb.menu_button)
    await bot.delete_message(chat_id=message.from_user.id, message_id=id[0])
