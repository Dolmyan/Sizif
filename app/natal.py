from datetime import datetime

from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram import Router, Bot, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

import app.keyboards as kb
from app.generators import *
from app.states import Form
from config import *
from database import BotDB

db = BotDB('sizif_mode.db')
router = Router()
bot = Bot(token=TG_TOKEN)



@router.callback_query(lambda c: c.data == 'astrology_no')
async def ast_no(callback_query: CallbackQuery):
    maybe = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîÆ –î–∞, –¥–∞–≤–∞–π—Ç–µ!', callback_data='astrology_yes')],
        [InlineKeyboardButton(text='üôÖ‚Äç‚ôÇÔ∏è –ù–µ—Ç, –Ω–µ —Ö–æ—á—É', callback_data='no_try_astrology')],
    ])
    await callback_query.message.answer(
        "ü§î –ê —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? –õ–∏—à–Ω–∏–º —Ç–æ—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç! \n\n"
        "üõ°Ô∏è –ù–∞ –≤–æ–π–Ω–µ —Å —Å–æ–±–æ–π ‚Äî –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ö–æ—Ä–æ—à–∏. –ú–æ–∂–µ—Ç, –≤—Å—ë-—Ç–∞–∫–∏ –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ? ‚ú®",
        reply_markup=maybe
    )


@router.callback_query(lambda c: c.data == 'astrology_yes')
async def ast_yes(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code> üî¢",
        parse_mode="HTML"
    )
    await state.set_state(Form.birthday)

@router.message(Form.birthday)
async def process_date(message: Message, state: FSMContext):
    user_input = message.text.strip()
    if re.match(r'\d{2} \d{2} \d{4}', user_input):
        user_input = user_input.replace(' ', '.')

    possible_formats = [
        "%d.%m.%Y",  # –¥–¥.–º–º.–≥–≥–≥–≥
        "%d-%m-%Y",  # –¥–¥-–º–º-–≥–≥–≥–≥
        "%Y-%m-%d",  # –≥–≥–≥–≥-–º–º-–¥–¥
        "%Y.%m.%d",  # –≥–≥–≥–≥.–º–º.–¥–¥
        "%d/%m/%Y",  # –¥–¥/–º–º/–≥–≥–≥–≥
        "%m/%d/%Y",  # –º–º/–¥–¥/–≥–≥–≥–≥
    ]

    for date_format in possible_formats:
        try:
            date_obj = datetime.strptime(user_input, date_format)
            formatted_date = date_obj.strftime("%d.%m.%Y")
            await message.answer(
                f"üìÖ <b>–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞:</b> {formatted_date}\n\n"
                f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>—Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥</b> –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è üåç",
                parse_mode='HTML'
            )
            await state.update_data(birth_day=formatted_date)
            await state.set_state(Form.place)
            return
        except ValueError:
            continue

    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–¥–¥.–º–º.–≥–≥–≥–≥</i>.",
        parse_mode='HTML'
    )


@router.message(Form.place)
async def place(message: Message, state: FSMContext):
    place = message.text
    await state.update_data(place=place)
    await message.answer(
        '‚è≥ –ò –Ω–∞–∫–æ–Ω–µ—Ü, —É–∫–∞–∂–∏—Ç–µ <b>–≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è</b> üï∞Ô∏è',
        parse_mode='HTML'
    )
    await state.set_state(Form.time)


@router.message(Form.time)
async def process_time(message: Message, state: FSMContext):
    user_input = message.text.strip()

    if re.match(r'\d{2} \d{2}', user_input):
        user_input = user_input.replace(' ', ':')
    elif re.match(r'\d{2}-\d{2}', user_input):
        user_input = user_input.replace('-', ':')

    possible_formats = [
        "%H:%M",  # —á—á:–º–º
        "%H.%M",  # —á—á.–º–º
    ]

    for time_format in possible_formats:
        try:
            time_obj = datetime.strptime(user_input, time_format)
            formatted_time = time_obj.strftime("%H:%M")
            await state.update_data(time=formatted_time)
            await message.answer(
                f"‚è∞ <b>–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b> {formatted_time} ‚úÖ\n\n",
                parse_mode='HTML'
            )
            await state.update_data(formatted_time=formatted_time)

            # await show_menu(message.from_user.id)

            data = await state.get_data()
            db.update_user_details(user_id=message.from_user.id, birth_day=data.get("birth_day"),
                                   birth_place=data.get("place"),
                                   birth_time=data.get("time"))


            await state.clear()

            return
        except ValueError:
            continue
    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>—á—á:–º–º</i>.",
        parse_mode='HTML'
    )

