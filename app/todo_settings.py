import logging
import asyncio
import os
import re
import time
from datetime import datetime, timedelta

from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.fsm import state
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from app.generators import *
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.generators import *
from app.states import Form, Sisyphus, Todo
from app.todo import show_tasks
from config import *
from database import BotDB

db = BotDB('sizif_mode.db')
router = Router()
bot = Bot(token=TG_TOKEN)

# from dateutil import parser
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from datetime import datetime
import logging



logging.basicConfig(level=logging.INFO)
async def show_task_details(entity, state: FSMContext):
    tasks = db.get_tasks(entity.from_user.id)
    data = await state.get_data()

    if isinstance(entity, CallbackQuery):
        task_index = int(entity.data.split('_')[1])

    elif isinstance(entity, Message):
        task_index = int(data.get('task_index', 0))

    await state.update_data(task_index=task_index)

    task_about = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'adddescription_{task_index}')],
        [InlineKeyboardButton(text='‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data=f'addreminder_{task_index}')],
        [InlineKeyboardButton(text='‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ (—É–¥–∞–ª–∏—Ç—å) ‚ùå', callback_data=f'delete_{task_index}')],
    ])

    text = f'<b>üíº –ó–∞–¥–∞—á–∞:</b> {tasks[task_index][0]}\n\n'

    if tasks[task_index][1]:
        text += f'<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tasks[task_index][1]}\n\n'
    if tasks[task_index][2]:
        text += f'<b>‚è∞–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {tasks[task_index][2]}\n\n'

    if isinstance(entity, Message):
        await entity.answer(
            text=text,
            reply_markup=task_about,
            parse_mode='HTML'
        )
    elif isinstance(entity, CallbackQuery):
        await entity.message.answer(
            text=text,
            reply_markup=task_about,
            parse_mode='HTML'
        )


@router.callback_query(lambda c: c.data.startswith('about_'))
async def about_task(callback_query: CallbackQuery, state: FSMContext):
    await show_task_details(callback_query, state)


@router.callback_query(lambda c: c.data.startswith('delete_'))
async def delete_task(callback_query: CallbackQuery):
    tasks = db.get_tasks(callback_query.from_user.id)
    task_index = int(callback_query.data.split('_')[1])
    tasks.pop(task_index)
    db.update_tasks(user_id=callback_query.from_user.id, tasks=tasks)
    await callback_query.answer(
        f'‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.'
    )
    await show_tasks(callback_query)


@router.callback_query(lambda c: c.data.startswith('adddescription_'))
async def add_description_task(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        text='<b>üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n\n'
             '<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–µ –∑–∞–±—ã—Ç—å –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã! üí°</i>',
        parse_mode='HTML'
    )
    await state.set_state(Todo.description)



@router.message(Todo.description)
async def save_new_task(message: Message, state: FSMContext):
    description = message.text
    tasks = db.get_tasks(message.from_user.id)
    data = await state.get_data()
    task_index = int(data['task_index'])
    tasks[task_index][1] = description

    db.update_tasks(user_id=message.from_user.id, tasks=tasks)
    await state.clear()
    await show_task_details(message, state)


@router.callback_query(lambda c: c.data.startswith('addreminder_'))
async def add_description_task(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        text='<b>‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n'
             '<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i>\n'
             '<b>–°–µ–≥–æ–¥–Ω—è –≤ 15:30</b> –∏–ª–∏ <b>–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—å</b>\n',
        parse_mode='HTML'
    )
    await state.set_state(Todo.reminder)


@router.message(Todo.reminder)
async def save_new_task(message: Message, state: FSMContext):
    time = message.text
    tasks = db.get_tasks(message.from_user.id)
    data = await state.get_data()
    task_index = int(data['task_index'])
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
    if '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in time.lower():
        today = datetime.today()
        time = time.lower().replace('–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '—á–µ—Ä–µ–∑ –¥–≤–∞ –¥–Ω—è')

    if '—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É' in time.lower():
        time = (datetime.now() + timedelta(minutes=1)).strftime('%Y-%m-%d %H:%M')
    elif '—á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞' in time.lower():
        time = (datetime.now() + timedelta(minutes=30)).strftime('%Y-%m-%d %H:%M')
    elif '—á–µ—Ä–µ–∑' in time.lower() and '–º–∏–Ω—É—Ç' in time.lower():
        try:
            minutes = int([word for word in time.split() if word.isdigit()][0])
            time = (datetime.now() + timedelta(minutes=minutes)).strftime('%Y-%m-%d %H:%M')
        except (ValueError, IndexError):
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é dateutil.parser
        # parsed_time = parser.parse(time, fuzzy=True)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –Ω–µ–º—É —Ñ–æ—Ä–º–∞—Ç
        if '—á–µ—Ä–µ–∑ –¥–≤–∞ –¥–Ω—è' in time.lower():
            parsed_time = today + timedelta(days=2)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_time = parsed_time.strftime('%Y-%m-%d %H:%M')
        print(formatted_time)
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = AsyncIOScheduler()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        scheduler.add_job(
            send_reminder,
            trigger=DateTrigger(run_date=parsed_time),
            args=[message.from_user.id, parsed_time, bot, tasks, task_index],  # –ø–µ—Ä–µ–¥–∞–µ–º user_id, –≤—Ä–µ–º—è –∏ –æ–±—ä–µ–∫—Ç bot
            id=f"reminder_{message.from_user.id}_{parsed_time}",
            replace_existing=True
        )

        # –°—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.start()
        tasks[task_index][2] = formatted_time

        db.update_tasks(user_id=message.from_user.id, tasks=tasks)
        await message.answer(
            text=f"<b>‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {formatted_time} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n<i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –∑–∞–¥–∞—á–µ! üéØ</i>",
            parse_mode='HTML'
        )
        await show_tasks(message)

    except (ValueError, OverflowError) as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."
        )


async def send_reminder(user_id, reminder_time, bot, tasks, task_index):
    tasks=tasks[task_index]
    print(tasks)
    await bot.send_message(
        chat_id=user_id,
        text=f"<b>üíº –ó–∞–¥–∞—á–∞:</b> {tasks[0]}\n\n"
             f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {tasks[1]}\n\n"
             f"<b>‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {tasks[2]}\n",
        parse_mode='HTML'
    )

